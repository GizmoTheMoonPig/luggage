buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'eclipse'
apply plugin:  'maven-publish'
apply plugin: 'net.minecraftforge.gradle'

version = "${project.minecraft_version}-${project.mod_version}." + (hasProperty("CIVersion") ? CIVersion : '0')
group = 'com.gizmo.luggage'
archivesBaseName = project.modid

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: "${project.minecraft_version}"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'luggage'

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'luggage'

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'luggage'

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', "${project.modid}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Luggage",
                "Specification-Vendor"    : "GizmoTheMoonPig",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : "Luggage",
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "GizmoTheMoonPig",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def secrets = new Properties()
def secretsFile = file('secrets.properties');
if (secretsFile.exists()) {
    secretsFile.withInputStream {
        stream -> secrets.load(stream)
    }

    fileTree("secrets").matching {
        include "**/*.properties"
    }.each {
        File file ->
            file.withInputStream {
                stream -> secrets.load(stream)
            }
    }
}

jar.finalizedBy('reobfJar')

def mavenUser = hasProperty("CIMUser") ? CIMUser : secrets.getProperty("maven_username")
def mavenToken = hasProperty("CIMToken") ? CIMToken : secrets.getProperty("maven_password")

publishing {
    publications {
        mavenJava(MavenPublication) {
            afterEvaluate {
                artifact project.jar
                artifact project.sourceJar
            }
            setGroupId 'GizmoTheMoonPig'
            setArtifactId 'luggage'
        }
    }
    repositories {
        maven {
            url "https://maven.tamaized.com/releases"
            credentials {
                username mavenUser
                password mavenToken
            }
        }
    }
}

task sourceJar(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
